# CI workflow for running testkube test suites 
name: Run Testkube test suite for MS
permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      TESTSUITE:
        description: "Name of Testsuite to run"
        required: true
        type: string
      MICROSERVICE:
        description: "Name of the GitHub repository to update and run Testkube for"
        required: true
      NAMESPACE:
        description: "Namespace of request objects to include"
        required: true
      CLUSTER_NAME:
        description: "Cluster name to run testkube under"
        type: choice
        options:
        - quartex-production
        - quartex-dev-01
        - quartex-development
      REGION:
        description: "Set Region to find the cluster in"
        type: choice
        options:
        - us-east-1

  workflow_call:
    inputs:
      TESTSUITE:        # Name of Testsuite to run
        required: true
        type: string
      MICROSERVICE:     # Name of the GitHub repository to update and run Testkube for
        required: true
        type: string
      NAMESPACE:        # Namespace of request objects to include
        required: true
        type: string
      CLUSTER_NAME:     # Cluster name to run testkube under
        type: string
        default: quartex-production
      REGION:           # Set Region to find the cluster in
        type: string
        default: us-east-1
    secrets:
      PIPELINE_TESTS_ARN :
        required: true

jobs:
  testkube:
    runs-on: ubuntu-latest
    #outputs:
      #output1: ${{ steps.results.outputs.result }}
    steps:
      # Checks-out repository
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials (ECR_REGION_1)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.PIPELINE_TESTS_ARN }}
          role-duration-seconds: 900
          aws-region: ${{ inputs.REGION }}

      # Install kubectl and testkube clis
      - name: Install dependancies
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.17/2023-05-11/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv ./kubectl /usr/local/bin/kubectl

          wget -qO - https://repo.testkube.io/key.pub | apt-key add -
          echo "deb https://repo.testkube.io/linux linux main" | tee -a /etc/apt/sources.list
          apt-get update
          apt-get install -y testkube

      - name: Configure EKS Cluster access
        run: aws eks update-kubeconfig --name ${{ inputs.CLUSTER_NAME }} --region ${{ inputs.REGION }} 
      
      - name: Apply sources manifest
        run: kubectl apply -f definitions/repos/${{ inputs.MICROSERVICE }}.yaml

      - name: Apply playwright tests manifest
        run: kubectl apply -f definitions/tests/playwright/${{ inputs.MICROSERVICE }}.yaml

      - name: Apply K6 tests manifest
        run: kubectl apply -f definitions/tests/k6/${{ inputs.MICROSERVICE }}.yaml

      - name: Apply Test Suite
        run: kubectl apply -f definitions/testsuites/${{ inputs.MICROSERVICE }}.yaml        

      - name: Run Test Suite
        run: kubectl testkube run testsuite ${{ inputs.TESTSUITE }} -n testkube -v NAMESPACE=${{ inputs.NAMESPACE }} --watch

      - name: Get test status
        run: | 
          executionId=$(cat results.txt | grep "Execution ID" | awk '{print $4}')
          echo "Execution ID = ${executionId}"
          kubectl testkube get tse ${executionId} -o json > results.json
          result=$(jq .stepResults.execution.executionResult.status results.json | jq -r)
          echo "result=${result}" >> $GITHUB_OUTPUT
          echo "Tests Result = ${result}"





      



